#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (5, 0, 0)
                double radius = 5
            }
            dictionary Perspective = {
                double3 position = (3.7223780294019218, 3.7223780294019213, 3.722377976357693)
                double3 target = (0.00999998814544556, 0.009999988145446004, 0.01000002370911135)
            }
            dictionary Right = {
                double3 position = (0, -5, 0)
                double radius = 5
            }
            dictionary Top = {
                double3 position = (0, 0, 5)
                double radius = 5
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            string authoring_layer = "./observer_camera.usda"
            dictionary locked = {
            }
            dictionary muteness = {
            }
        }
        dictionary physicsSettings = {
            int "/persistent/simulation/minFrameRate" = 60
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:index:backgroundColor" = (0, 0, 0)
            float3 "rtx:index:regionOfInterestMax" = (0, 0, 0)
            float3 "rtx:index:regionOfInterestMin" = (0, 0, 0)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:lensFlares:spectralBlurWavelengthRange" = (380, 550, 770)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:indexdirect:svoBrickSize" = (32, 32, 32)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
            float2 "rtx:viewTile:resolution" = (0, 0)
        }
    }
    defaultPrim = "ObserverCamera"
    endTimeCode = 1000000
    metersPerUnit = 1
    startTimeCode = 0
    timeCodesPerSecond = 60
    upAxis = "Z"
)

over "Render" (
    hide_in_stage_window = true
)
{
    over "OmniverseKit"
    {
        over "HydraTextures"
        {
            over "Replicator_01"
            {
                over "PostRender"
                {
                    over "SDGPipeline"
                    {
                        custom uint64 graph:variable:__computeParams (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__computeParams"
                        )
                        custom uint64 graph:variable:__cudaInteropState (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__cudaInteropState"
                        )
                        custom uint64 graph:variable:__cudaStream (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__cudaStream"
                        )
                        custom uint64 graph:variable:__rpInteropState (
                            customData = {
                                token scope = "private"
                            }
                            displayName = "__rpInteropState"
                        )
                    }
                }
            }

            over "Replicator"
            {
                over "PostRender"
                {
                }
            }
        }
    }
}

def "ObserverCamera"
{
    def OmniGraph "ROS_Camera"
    {
        token evaluationMode = "Automatic"
        token evaluator:type = "execution"
        token fabricCacheBacking = "Shared"
        int2 fileFormatVersion = (1, 9)
        token pipelineStage = "pipelineStageSimulation"

        def OmniGraphNode "OnPlaybackTick"
        {
            token node:type = "omni.graph.action.OnPlaybackTick"
            int node:typeVersion = 2
            custom double outputs:deltaSeconds
            custom double outputs:frame
            custom uint outputs:tick (
                customData = {
                    bool isExecution = 1
                }
            )
            custom double outputs:time
        }

        def OmniGraphNode "CameraInfoPublish"
        {
            custom uint64 inputs:context
            prepend uint64 inputs:context.connect = </ObserverCamera/ROS_Camera/Context.outputs:context>
            custom bool inputs:enabled
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </ObserverCamera/ROS_Camera/RenderProduct.outputs:execOut>
            custom string inputs:frameId = "observer_camera_frame"
            custom string inputs:frameIdRight
            custom uint inputs:frameSkipCount
            custom string inputs:nodeNamespace = "observer_camera"
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom token inputs:renderProductPath
            prepend token inputs:renderProductPath.connect = </ObserverCamera/ROS_Camera/RenderProduct.outputs:renderProductPath>
            custom token inputs:renderProductPathRight
            custom bool inputs:resetSimulationTimeOnStop = 1
            custom string inputs:topicName = "camera_info"
            custom string inputs:topicNameRight
            custom bool inputs:useSystemTime
            token node:type = "omni.isaac.ros2_bridge.ROS2CameraInfoHelper"
            int node:typeVersion = 1
        }

        def OmniGraphNode "RenderProduct"
        {
            custom rel inputs:cameraPrim = </ObserverCamera/Camera> (
                customData = {
                    dictionary omni = {
                        dictionary graph = {
                            string relType = "target"
                        }
                    }
                }
            )
            custom bool inputs:enabled
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </ObserverCamera/ROS_Camera/RunOnce.outputs:step>
            custom uint inputs:height
            custom uint inputs:width
            token node:type = "omni.isaac.core_nodes.IsaacCreateRenderProduct"
            int node:typeVersion = 2
            custom uint outputs:execOut (
                customData = {
                    bool isExecution = 1
                }
            )
            custom token outputs:renderProductPath
        }

        def OmniGraphNode "RunOnce"
        {
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </ObserverCamera/ROS_Camera/OnPlaybackTick.outputs:tick>
            token node:type = "omni.isaac.core_nodes.OgnIsaacRunOneSimulationFrame"
            int node:typeVersion = 1
            custom uint outputs:step (
                customData = {
                    bool isExecution = 1
                }
            )
        }

        def OmniGraphNode "Context"
        {
            custom uchar inputs:domain_id
            custom bool inputs:useDomainIDEnvVar
            token node:type = "omni.isaac.ros2_bridge.ROS2Context"
            int node:typeVersion = 2
            custom uint64 outputs:context
        }

        def OmniGraphNode "RGBPublish"
        {
            custom uint64 inputs:context
            prepend uint64 inputs:context.connect = </ObserverCamera/ROS_Camera/Context.outputs:context>
            custom bool inputs:enabled
            custom bool inputs:enableSemanticLabels
            custom uint inputs:execIn (
                customData = {
                    bool isExecution = 1
                }
            )
            prepend uint inputs:execIn.connect = </ObserverCamera/ROS_Camera/RenderProduct.outputs:execOut>
            custom string inputs:frameId = "observer_camera_frame"
            custom uint inputs:frameSkipCount
            custom string inputs:nodeNamespace = "observer_camera"
            custom string inputs:qosProfile
            custom uint64 inputs:queueSize
            custom token inputs:renderProductPath
            prepend token inputs:renderProductPath.connect = </ObserverCamera/ROS_Camera/RenderProduct.outputs:renderProductPath>
            custom bool inputs:resetSimulationTimeOnStop = 1
            custom string inputs:semanticLabelsTopicName
            custom float2 inputs:stereoOffset
            custom string inputs:topicName = "/rgb"
            custom token inputs:type = "rgb" (
                allowedTokens = ["rgb", "depth", "depth_pcl", "instance_segmentation", "semantic_segmentation", "bbox_2d_tight", "bbox_2d_loose", "bbox_3d", "camera_info"]
            )
            custom bool inputs:useSystemTime
            custom token inputs:viewport
            token node:type = "omni.isaac.ros2_bridge.ROS2CameraHelper"
            int node:typeVersion = 2
        }
    }

    def Camera "Camera"
    {
        float2 clippingRange = (0.01, 10000000)
        float focalLength = 18.147562
        float focusDistance = 400
        quatd xformOp:orient = (0.829812, 0.466267, -0.196449, -0.235403)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.6225726503183219, -1.2197581377173388, 1.618946933005386)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }
}

